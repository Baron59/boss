/*	Better Oblivion Sorting Software
	
	Quick and Dirty Load Order Utility
	(Making C++ look like the scripting language it isn't.)

    Copyright (C) 2009-2010  Random/Random007/jpearce & the BOSS development team
    http://creativecommons.org/licenses/by-nc-nd/3.0/

	$Revision: 1437 $, $Date: 2010-08-31 22:22:32 +0100 (Tue, 31 Aug 2010) $
*/

#include "Userlist.h"

namespace fs = boost::filesystem;

namespace boss {
	using namespace std;

	//Date comparison, used for sorting mods in modlist class.
	bool SortByDate(string mod1,string mod2) {
			time_t t1 = fs::last_write_time(mod1) ;
			time_t t2 = fs::last_write_time(mod2) ;

			if (difftime(t1,t2)>0) return false;
			else return true;
	}

	//Checks if a given object is an esp, an esm or a ghosted mod.
	bool IsPlugin(string object) {
		return (object.find(".esp")!=string::npos || object.find(".esm")!=string::npos || object.find(".ghost")!=string::npos);
	}

	//Debug function, just prints the object contents to the output file stream given.
	void Rules::PrintRules(ofstream& output) {
		output << "Rule dump commencing..." << "<br />" << endl;
		for (int i=0;i<(int)objects.size();i++) {
			output << keys[i] << ": " << objects[i] << "<br />" << endl;
		}
		output << "Rule dump finished.";
	}

	//Prints messages generated by userlist parsing and rule processing to the output file stream given.
	void Rules::PrintMessages(ofstream& output) {
		output << messages;
	}

	//Add rules from userlist.txt into the rules object.
	//Then checks rule syntax and discards rules with incorrect structures.
	//Also checks if the mods referenced by rules are in your Data folder, and discards rule that reference missing mods.
	//Generates error messages for rules that are discarded.
	void Rules::AddRules() {
		ifstream userlist;
		string line,key,object;
		int pos;
		bool skip = false;
		userlist.open("BOSS\\userlist.txt");
		messages += "<p>";
		while(GetLine(userlist,line)) {
			if (line.substr(0,2)!="//") {
				pos = line.find(':');
				key = line.substr(0,pos);
				object = line.substr(pos+2);
				if (key=="ADD" || key=="OVERRIDE" || key=="FOR") {
					if (skip) {
						keys.erase(keys.begin()+rules.back(), keys.end());
						objects.erase(objects.begin()+rules.back(), objects.end());
						rules.pop_back();
					}
						keys.push_back(key);
						objects.push_back(object);
						rules.push_back((int)keys.size()-1);
						skip = false;
					if (IsPlugin(object) && !(fs::exists(object) || fs::exists(object+".ghost"))) {
						messages += "</p><p style='margin-left:40px; text-indent:-40px;'>The rule beginning \""+keys[rules.back()]+": "+objects[rules.back()]+"\" has been skipped as it has the following problem(s):<br />";
						messages += "\""+object+"\" is not installed.<br />";
						skip = true;
					}
				} else if ((key=="BEFORE" || key=="AFTER")) {
					keys.push_back(key);
					objects.push_back(object);
					if (IsPlugin(object) && !(fs::exists(object) || fs::exists(object+".ghost"))) {
						if (skip==false) messages += "</p><p style='margin-left:40px; text-indent:-40px;'>The rule beginning \""+keys[rules.back()]+": "+objects[rules.back()]+"\" has been skipped as it has the following problem(s):<br />";
						messages += "<span class='error'>\""+object+"\" is not installed.</span><br />";
						skip = true;
					}
					if ((IsPlugin(object) && !IsPlugin(objects[rules.back()])) || (!IsPlugin(object) && IsPlugin(objects[rules.back()]))) {
						if (skip==false) messages += "</p><p style='margin-left:40px; text-indent:-40px;'>The rule beginning \""+keys[rules.back()]+": "+objects[rules.back()]+"\" has been skipped as it has the following problem(s):<br />";
						messages += "<span class='error'>It references a mod and a group.</span><br />";
						skip = true;
					}
				} else if ((key=="APPEND" || key=="REPLACE")) {
					keys.push_back(key);
					objects.push_back(object);
					if (!IsPlugin(objects[rules.back()])) {
						if (skip==false) messages += "</p><p style='margin-left:40px; text-indent:-40px;'>The rule beginning \""+keys[rules.back()]+": "+objects[rules.back()]+"\" has been skipped as it has the following problem(s):<br />";
						messages += "<span class='error'>It tries to attach a message to a group.</span><br />";
						skip = true;
					}
				}
			}
		}
		messages += "</p>";
		if (skip) {
			keys.erase(keys.begin()+rules.back(), keys.end());
						objects.erase(objects.begin()+rules.back(), objects.end());
			rules.pop_back();
		}
		userlist.close();
	}

	//Find the line in the keys/objects vectors that contains the given object.
	int Rules::GetRuleIndex(string object) {
		for (int i=0;i<(int)objects.size();i++) {
			if (Tidy(objects[i])==Tidy(object)) return i;
		}
		return -1;
	}

	//Adds mods in directory to modlist in date order (AKA load order).
	void Mods::AddMods() {
		fs::path p(".");
		if (fs::is_directory(p)) {
			for (fs::directory_iterator itr(p); itr!=fs::directory_iterator(); ++itr) {
				if (fs::is_regular_file(itr->status()) && (fs::extension(itr->filename())==".esp" || fs::extension(itr->filename())==".esm" || fs::extension(itr->filename())==".ghost")) {
					mods.push_back(itr->filename());
				}
			}
		}
		modmessages.resize((int)mods.size());
		sort(mods.begin(),mods.end(),SortByDate);
	}

	//Save mod list to modlist.txt. Backs up old modlist.txt as modlist.old first.
	int Mods::SaveModList() {
		ofstream modlist;
		try {
			//There's a bug in the boost rename function - it should replace existing files, but it throws an exception instead, so remove the file first.
			//This bug will be fixed in BOOST 1.45, but that will break the AddMods() function and possibly other things, so be sure to change that when we upgrade.
			if (fs::exists("BOSS\\modlist.old")) fs::remove("BOSS\\modlist.old");
			if (fs::exists("BOSS\\modlist.txt")) fs::rename("BOSS\\modlist.txt", "BOSS\\modlist.old");
		} catch(boost::filesystem::filesystem_error e) {
			//Couldn't rename the file, print an error message.
			return 1;
		}
		modlist.open("BOSS\\modlist.txt");
		//Provide error message if it can't be written.
		if (modlist.fail()) {
			return 2;
		}
		for (int i=0;i<(int)mods.size();i++) {
			modlist << mods[i] << endl;
		}
		return 0;
	}

	//Debug output function.
	void Mods::PrintModList(ofstream& out) {
		for (int i=0;i<(int)mods.size();i++) {
			out << mods[i] << "<br />" << endl;
		}
	}

	//Look for a mod in the modlist, even if the mod in question is ghosted.
	int Mods::GetModIndex(string mod) {
		for (int i=0;i<(int)mods.size();i++) {
			if (Tidy(mods[i])==Tidy(mod) || Tidy(mods[i])==Tidy(mod+".ghost")) return i;
		}
		return -1;
	}
}