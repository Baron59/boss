/*	Better Oblivion Sorting Software
	
	Quick and Dirty Load Order Utility
	(Making C++ look like the scripting language it isn't.)

    Copyright (C) 2009-2010  Random/Random007/jpearce & the BOSS development team
    http://creativecommons.org/licenses/by-nc-nd/3.0/

	$Revision: 1284 $, $Date: 2010-08-05 03:43:59 +0100 (Thu, 05 Aug 2010) $
*/

/*	This file is my playground for working on userlist implementation, though it's also got a WIP modlist class too
	that will hopefully take over from the current implementation soon too (it just needs to list files in date order now)
*/

#ifndef __BOSS_USERLIST_H__
#define __BOSS_USERLIST_H__

#include <string>
#include <fstream>
#include "Globals.h"
#include <Support/Types.h>
#include <Support/Helpers.h>
#include <vector>

#include "boost/filesystem.hpp"

namespace fs = boost::filesystem;

namespace boss {
	using namespace std;

	//Date comparison, used for sorting mods in modlist class.
	bool SortByDate(string mod1,string mod2) {
			time_t t1 = fs::last_write_time(mod1) ;
			time_t t2 = fs::last_write_time(mod2) ;

			if (difftime(t1,t2)>0) return false;
			else return true;
	}

	bool IsPlugin(string object) {
		return (object.find(".esp")!=string::npos || object.find(".esm")!=string::npos || object.find(".ghost")!=string::npos);
	}
	
	//Rules class contains storage objects for all 4 parts of a rule.
	//Also contains constructor-ish function to load all rules.
	//And a few other useful functions.
	class Rules {
	public:
		vector<string> keys,objects;
		string messages;
		void AddRules();
		void PrintRules(ofstream& output);
		void PrintMessages(ofstream& output);
		int GetRuleIndex(string object);
	};

	//Debug function, just prints the object contents to the output file stream given.
	void Rules::PrintRules(ofstream& output) {
		output << "Rule dump commencing..." << endl << endl;
		for (int i=0;i<(int)objects.size();i++) {
			output << keys[i] << ": " << objects[i] << "<br />" << endl;
		}
		output << "Rule dump finished.";
	}

	//Prints messages generated by userlist parsing and rule processing to the output file stream given.
	void Rules::PrintMessages(ofstream& output) {
		output << messages;
	}

	//Add rules from userlist.txt into the rules object.
	//Then checks rule syntax and discards rules with incorrect structures.
	//Also checks if the mods referenced by rules are in your Data folder, and discards rule that reference missing mods.
	//Generates error messages for rules that are discarded.
	void Rules::AddRules() {
		ifstream userlist;
		string line,key,object;
		int pos;
		bool skip = true;
		userlist.open("BOSS\\userlist.txt");
		while(GetLine(userlist,line)) {
			if (line.substr(0,2)!="//") {
				pos = line.find(':');
				key = line.substr(0,pos);
				object = line.substr(pos+2);
				if (key=="ADD" || key=="OVERRIDE"|| key=="FOR") {
					if (IsPlugin(object) && !fs::exists(object)) {
						messages += "\""+object+"\" is not installed. Rule skipped.<br /><br />";
						skip = true;
					} else {
						keys.push_back(key);
						objects.push_back(object);
						skip = false;
					}
				} else if ((key=="BEFORE" || key=="AFTER") && !skip) {
					if (IsPlugin(object) && !fs::exists(object)) {
						messages += "\""+object+"\" is not installed. Rule skipped.<br /><br />";
						keys.pop_back();
						objects.pop_back();
					} else {
						if ((IsPlugin(object) && IsPlugin(objects.back())) || (!IsPlugin(object) && !IsPlugin(objects.back()))) {
							keys.push_back(key);
							objects.push_back(object);
						} else {
							messages += "The rule beginning \""+keys.back()+": "+objects.back()+"\" does not have the correct syntax. Rule skipped.<br/><br />";
							keys.pop_back();
							objects.pop_back();
						}
					}
				} else if ((key=="APPEND" || key=="REPLACE") && !skip) {
					if (IsPlugin(objects.back())) {
						keys.push_back(key);
						objects.push_back(object);
					} else {
						messages += "The rule beginning \""+keys.back()+": "+objects.back()+"\" does not have the correct syntax. Rule skipped.<br/><br />";
						keys.pop_back();
						objects.pop_back();
					}
				}
			}
		}
		userlist.close();
	}

	int Rules::GetRuleIndex(string object) {
		for (int i=0;i<(int)objects.size();i++) {
			if (Tidy(objects[i])==Tidy(object)) return i;
		}
		return -1;
	}

	//Class to replace current modlist implementation.
	class Mods {
	public:
		vector<string> mods,unknownmods;			//Stores the mods in your data folder. Stores the mods not recognised by masterlist or userlist.
		vector<vector<string>> modmessages;		//Stores the messages attached to each mod. First dimension matches up with the mods vector, then second lists the messages attached to that mod.
		void AddMods();
		void PrintModList(ofstream& out);
		void SaveModList();
		int GetModIndex(string mod);
	};

	//Adds mods in directory to Modlist in date order (same as current load order, basically).
	void Mods::AddMods() {
		fs::path p(".");
		if (fs::is_directory(p)) {
			for (fs::directory_iterator itr(p); itr!=fs::directory_iterator(); ++itr) {
				if (fs::is_regular_file(itr->status()) && (fs::extension(itr->filename())==".esp" || fs::extension(itr->filename())==".esm" || fs::extension(itr->filename())==".ghost")) {
					mods.push_back(itr->filename());
				}
			}
		}
		modmessages.resize((int)mods.size());
		sort(mods.begin(),mods.end(),SortByDate);
	}

	//Save mod list to modlist.txt.
	//Backs up old modlist.txt as modlist.old first.
	void Mods::SaveModList() {
		ofstream modlist;
		if (fs::exists("BOSS\\modlist.old")) fs::remove("BOSS\\modlist.old");
		if (fs::exists("BOSS\\modlist.txt")) fs::rename("BOSS\\modlist.txt", "BOSS\\modlist.old");
		modlist.open("BOSS\\modlist.txt");
		for (int i=0;i<(int)mods.size();i++) {
			modlist << mods[i] << endl;
		}
	}

	//Debug output function.
	void Mods::PrintModList(ofstream& out) {
		for (int i=0;i<(int)mods.size();i++) {
			out << mods[i] << "<br />" << endl;
		}
	}

	int Mods::GetModIndex(string mod) {
		for (int i=0;i<(int)mods.size();i++) {
			if (Tidy(mods[i])==Tidy(mod)) return i;
		}
		return -1;
	}

	//Class to replace current masterlist implementation.

}

#endif __BOSS_USERLIST_H__