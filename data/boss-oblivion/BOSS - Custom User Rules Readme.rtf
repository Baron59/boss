{\rtf1\ansi\ansicpg1252\deff0\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green0\blue0;\red155\green0\blue211;\red0\green77\blue187;\red0\green0\blue0;}
{\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs44 Better Oblivion Sorting Software - Custom User Rules Readme\par
\cf1\fs22 NOTE: This functionality is only found in the wrinklyninja-user-rules branch. Some of the features explained here are not yet implemented. I have labelled such cases with red-type notes similar to this. If you try to use something that isn't implemented yet, it will break. In addition, everything is subject to change. Everything will be working and set by the time I merge the branch back into the trunk though. \par
-WrinklyNinja\cf0\par
While BOSS is able to sort the large number of mods listed in its masterlist without any user input, you may find that you wish to customise the sorting of your mods to a degree. This may be to include mods not listed in the masterlist (eg. temporary plugins or private mods that would serve no benefit being in the masterlist), or it could be to rearrange mods present in the masterlist that can be loaded in a different configuration for different results (eg. LAME and Supreme Magicka files). You may also wish to add extra messages to mods, or edit existing messages.\par
One possible solution is to edit your copy of the masterlist to include the desired changes. However, as updating your masterlist will remove these edits, this is not very suitable as a long term solution. \par
This is where custom user sorting rules comes in. Using a separate userlist file, you can define as many rules for sorting specific mods or groups of mods as you like, or for adding or overriding the messages attached to mods, and these rules will not be lost when you update your masterlist. \par
\par
\fs36 Getting Started With The Userlist \tab (or: Dictatorship In A Nutshell)\par
\cf2\fs22 NOTE: In this readme, the words 'mod' and 'plugin' are used interchangeably, meaning 'one individual file with a .esp or .esm extension'. Unless explicitely stated, the 'name' of a 'mod' or 'plugin' refers to its filename, including the extension.\cf0\fs36\par
\fs22 The userlist is the file which contains your custom rules for sorting mods and editing mods' messages. It is found at "Data\\BOSS\\userlist.txt". If it does not exist, simply create a new text file there with the same name.\par
Within this file, which you can open up in Notepad to edit, you list your rules definitions. There are three main types of rules that you can define: \par
\pard{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnqc\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Plugin rules. These sort plugins relative to other plugins. These plugins may be .esp or .esm files. You can add new plugins to sort, or override the positions of plugins already found in the masterlist with new positions.\par
{\pntext\f0 2.\tab}Group rules. These sort groups of plugins relative to other groups of plugins. These groups are all pre-defined in the BOSS masterlist, and are marked out by  "\\BeginGroup\tab\\:  Group Name" and "\\EndGroup\\\\" lines. You cannot define new groups to add to the masterlist, only move those which already exist.\par
{\pntext\f0 3.\tab}Message rules. These allow you to add or override any of the message types that can be attached to mods. The message types are: Bash Tag suggestions, general comments, critical FCOM install errors, installation requirements, specific incompatibilities, comments specific to when using OOO, and comments specific to when using Better Cities.\par
\pard\sa200\sl276\slmult1 The rule definition syntax is simple and concise, and is explained below.\par
\par
\fs36 Rule Definition Syntax\tab\tab\tab (or: Righting Rules)\fs22\par
\cf1 NOTE: The syntax is subject to change while I refine it and its implementation. Group and message rules have not yet been implemented at all.\cf0\par
\fs32 Sorting Rules\fs22\par
Plugin and Group type rules are also known as sorting rules, since they affect the load position of mods. Sorting rules consist of two lines of text:\par
\pard{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 The sort line. This consists of a 'sort symbol' which defines the type of rule, and a 'sort mod' or 'sort group' which defines the mod or group the rule is applied to respectively.\par
{\pntext\f0 2.\tab}The match line. This consists of a 'match symbol' which defines how the sort mod/group is ordered, and a 'match mod' or 'match group' which defines what the sort mod/group is ordered relative to. \par
\pard\sa200\sl276\slmult1 When you define sort and match mods, the filenames of those mods are used. When you define sort and match groups, the names of those groups are used as they appear in the masterlist. For example, if you wanted to sort or match the group of mods that begins with "\\BeginGroup\\: Supreme Magicka", you would put it in the rule as "Supreme Magicka".\par
The sort symbols are: \par
?\tab This is used to signify the rule is of the 'plugin addition' type, adding a mod not in the \tab masterlist to a specific position in the masterlist.\par
:\tab This is used to signify the rule is of the 'plugin override' type, overriding the current \tab position of a mod already in the masterlist with a new position specified by the rule.\par
\cf1 NOTE: The next sort symbol is not yet implemented.\cf0\par
*\tab This is used to signify the rule is of the 'group override' type, as it overrides the \tab current position of a group in the masterlist with a new position specified by the rule.\cf1\par
\cf0 The match symbols are:\par
>\tab This states that the sort mod or group given on the previous line is to load \tab immediately after the match mod or group given after the match symbol.\par
<\tab This states that the sort mod or group given on the previous line is to load \tab immediately before the match mod or group given after the match symbol\par
You may not mix and match mods and groups within rules. A mod must be sorted relative to other mods, and a group must be sorted relative to another group, using the appropriate sort symbol.\par
Some examples:\par
\pard\li720\sl276\slmult1\cf3 ?MyModToAdd.esp\par
>LoadAfterThis.esm\par
\par
:MyModToOverride.esp\par
<LoadBeforeThis.esp\par
\par
*L.A.M.E.\par
<Supreme Magicka\cf0\par
\pard\sl276\slmult1\par
\pard\sa200\sl276\slmult1 It should be self-evident, but the first example basically says "add MyModToAdd.esp to the masterlist after LoadAfterThis.esm" and the second says "remove MyModToOverride.esp from its current position in the masterlist, then add it before LoadBeforeThis.esp". The third example says "remove the group L.A.M.E. and its contents from the masterlist, then add it and its contents before the Supreme Magicka group".\par
\cf1\par
\cf4\fs32 Messages\par
\cf0\fs22 Before we can go on to explain message rules, we must first understand message types. Each of the seven message types begins with a symbol code that signifies what type of message it is, and then the message itself follows it. The message is just a standard line of text. In addition, Bash Tag suggestion comments also have a special syntax for the suggestions they include. The symbol codes for the different message types are:\par
%\tab Bash Tag Suggestion\par
?\tab General Comment\par
*\tab Critical FCOM Install Error\par
:\tab Installation Requirement\par
"\tab Specific Incompatibility\par
$\tab OOO specific comment. This will only be displayed if the user has OOO in their load \tab order.\par
^\tab Better Cities specific comment. This will only be displayed if the user has Better \tab Cities in their load order.\par
The syntax for a Bash Tag suggestion is:\par
% \{\{BASH:list suggested tags separated by commas here\}\} you may also have some text here.\par
For example:\par
\pard\li720\sa200\sl276\slmult1\cf3 % \{\{BASH:Names,Graphics\}\} to prevent changes being lost when using overhauls.\cf0\par
\pard\sa200\sl276\slmult1\par
\cf1 NOTE: None of the message rules stuff is implemented yet.\cf0\par
\fs32 Message Rules\fs22\par
Message rules are different from sorting rules in that they do not affect the load order of plugins, but can be used to display information specific to a plugin. They have a slightly different syntax due to these differences, but still consist of two lines of text:\par
\pard{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 The message line. This line consists of the message symbol followed by the full comment line as it would appear in the masterlist, complete with opening symbol code.\par
{\pntext\f0 2.\tab}The mod line. This consists of a mod symbol followed by the name of the mod that you wish to add the message to, or override an existing message of.\par
\pard\sa200\sl276\slmult1 Messages can only be applied to specific mods, not groups. There is only one message symbol, and this is:\par
"\tab This is the message symbol. It signifies that the rule is a message rule.\par
The mod symbols are:\par
/\tab This states that the message is to be added to the mod that is given after the mod \tab symbol.\par
|\tab This states that the message is to overwrite any existing message or messages of the \tab same type attached to the mod that is given after the mod symbol.\par
Here are two examples:\par
\pard\sl276\slmult1\cf3 "% \{\{BASH:R.Teeth\}\}\par
/bgBalancingEVOptionalFangs.esp\par
\par
"? This is a replacement message.\par
|Unofficial Shivering Isles Patch.esp\cf0\par
\par
\pard\sa200\sl276\slmult1 The first example says "add the Bash Tag suggestion '\{\{BASH:R.Teeth\}\}' to the mod bgBalancingEVOptionalFangs.esp". The second says "replace the current general comments attached to 'Unofficial Shivering Isles Patch.esp' with 'This is a replacement message.'".\par
\par
\fs36 Further Notes On Rules \tab\tab\tab (or: Rules Have Rules)\fs22\par
You saw how to define simple rules with the examples at the end of the last section. Here are some further notes on defining rules that may not be evident, particularily when using multiple rules.\par
1. \tab You do not need to have blank lines between your rules, though it is neater and \tab easier to read, especially when you have lots of rules. \par
2. \tab The names of mods and groups are not case-sensitive.\par
3. \tab\b You must never sort a mod or group twice. \b0 When using a mix of mod and group rules, \tab be very careful to ensure that none of the sort mods are contained in any of the sort \tab groups.\par
4.\tab Rules are applied in the order they are listed, except that 'load before' rules are \tab applied before 'load after' rules. This means that you can have several rules loading \tab different sort mods or groups before or after the same match mod or group, eg:\par
\pard\li1440\sl276\slmult1\cf3 ?Mod3.esp\par
\pard\li1440\sa200\sl276\slmult1 >RTT.esp\par
\pard\li1440\sl276\slmult1 ?Mod5.esp\par
\pard\li1440\sa200\sl276\slmult1 >RTT.esp\par
\pard\li1440\sl276\slmult1 ?Mod1.esp\par
\pard\li1440\sa200\sl276\slmult1 <RTT.esp\par
\pard\li1440\sl276\slmult1 ?Mod4.esp\par
\pard\li1440\sa200\sl276\slmult1 >RTT.esp\par
\pard\li1440\sl276\slmult1 ?Mod2.esp\par
<RTT.esp\cf0\par
\pard\li720\sl276\slmult1\par
will give an order of:\par
\par
Mod1.esp\par
Mod2.esp\par
RTT.esp\par
Mod3.esp\par
Mod5.esp\par
\pard\li720\sa200\sl276\slmult1 Mod4.esp\par
\pard\sa200\sl276\slmult1\cf1 NOTE: The functionality in the point below has not been implemented. If you try to use it, you will break something.\cf0\par
5. \tab You may have the sort mod or group of one mod being the match mod or group of \tab others, so long as it is first sorted in one rule and then matched in later rules.\b  Do not \tab have your rules listed so that mods or groups are sorted after being matched. \b0 An \tab example of a correct set of rule-dependent rules is:\par
\pard\li1440\sl276\slmult1\cf3 ?Mod1.esp\par
<LoadBeforeThis.esp\par
\par
:xulAspenWood.esp\par
>Mod1.esp\par
\par
?Mod2.esp\par
\pard\li1440\sa200\sl276\slmult1 <Mod1.esp\cf0\par
\pard\li720\sa200\sl276\slmult1 which will order the mods as:\par
\pard\li720\sl276\slmult1 Mod2.esp\par
Mod1.esp\par
xulAspenWood.esp\par
\pard\li720\sa200\sl276\slmult1 LoadBeforeThis.esp\par
\pard\sa200\sl276\slmult1 6.\tab Message rules are also applied in the order they are listed, with no exceptions. You \tab may use this to add or override multiple messages to the same mod using a series of \tab rules, with each rule adding or overriding another message.\par
7.\tab\b You must never add and override the same type of message for the same mod. \tab\b0 Instead, just include whatever you wished to add as part of the message in the \tab override message rule.\par
The functionality described in point 5 does not allow you to do anything that cannot be done using the functionality described in point 4. You can get the same result simply by ordering your rules a certain way. For instance:\par
\pard\li720\sl276\slmult1\cf3 ?Mod2.esp\par
<LoadBeforeThis.esp\par
\par
?Mod1.esp\par
<LoadBeforeThis.esp\par
\par
:xulAspenWood.esp\par
<LoadBeforeThis.esp\cf0\par
\par
\pard\sa200\sl276\slmult1 will have the same effect as the rules in point 5. While rule-dependent rules can be simpler to understand, they carry a greater risk of resulting in an incorrect load order if you do not list them properly. Therefore, it is adviseable that you rely on rule ordering over rule-dependence wherever possible.\cf1\par
\cf0\par
\fs36 Enforcing Your Rules\tab\tab (or: How To Be The BOSS)\fs22\par
When BOSS is run, it will look for a userlist.txt. If it finds one, and the file contains at least one rule, it will apply all the rules it finds into your masterlist. It will print messages detailing the results of the rule application(s) into your BOSSlog.txt, in a section headed "Userlist Messages" near the top. There are two types of message that can be found:\par
\pard{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 A success message, detailing what mod or group was added, and where. A success message for a message rule will detail the type of rule added or overridden and to what mod the message was attached. It will not display the message itself, for brevity's sake.\par
{\pntext\f0 2.\tab}A failure message. This only occurs for 'plugin addition' type rules, if BOSS finds that the sort mod of that rule is already present in the masterlist. In this case, the message will be of the form: '"Mod Name" already present in masterlist.txt. Custom sorting rule skipped.'\par
\pard\sa200\sl276\slmult1 Rule application takes place before your mods are sorted. However, if you are updating your masterlist using the built-in updater, the masterlist update is done first, and then your rules are applied. This is to ensure that your previously applied rules are not overwritten by the updated masterlist, but are instead applied again to that.\par
Rules that are successfully applied stay in the masterlist even after BOSS has finished running, and even after they are removed from the userlist file. This has two effects:\par
\pard{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 The first time you apply an 'addition' type sorting rule to your masterlist, you can get a success message if the sort mod isn't already present. However, when you run BOSS after that, you will always get a failure message for that rule, because it has already been added. If you then update your masterlist and the updated version doesn't contain the sort mod, you will get the success message again, and the process repeats.\par
{\pntext\f0 2.\tab}If you wish to undo the application of a rule to your masterlist, you must first remove the rule from your userlist, and then update your masterlist. Because the rule is no longer defined, it cannot be re-applied to the updated masterlist.\par
\pard\sa200\sl276\slmult1\cf1 NOTE: I'd rather that they above weren't true, and the rules did actually get written into the masterlist, but instead are just imported into memory while BOSS is run, so that both points don't occur (no reccurrent error message because each time BOSS is run, it's as if the rules have never been imported, and to undo a rule, you just need to remove it from your userlist.) This may be something that will change before the branch merge.\cf0\par
\pard\sa200\sl276\slmult1\par
\fs36 Compatibility With BOSS Master List Manager (BOMM)\fs22\par
Compatibility with BOMM has not been tested. However, as BOMM includes similar user sorting and message rules functionality, it would be advisable to only use one method of implementing custom rules until a definite compatibility status has been determined, unless you are specifically interested in helping test the compatibility of the two. \par
}
 